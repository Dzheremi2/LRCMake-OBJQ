define main

import sys
import YAMLNotifier
import tmpdirs
import qtk from sys
import signals from sys
import manifestdata from sys
import ConfigController from qtk
import decorators from qtk.utils as deco
import window

##sys.SingletonClass()
##deco.Uncallable()
cChronograph(qtk.Application):; {
    o:INIT:
    oYAMLNotifier
    oConfigController

    extend :INIT:; {
        ConfigController.load("pkg:/config/config.yaml").observe(variable = self.config)
        self.signal_pool.add_pool(qtk.signals.SignalPool.new_named("YAMLNoti"))
        self.signal_pool.get_pool("YAMLNoti").add_policy(qtk.signals.SignalPolicy.new_for_ruleset(
            {
                "emit": qtk.signals.types.Emit.INSTANTLY,
                "callbacks": [getmethod(@win, "build_sidebar")]
            }
        ))
    }
    
    ##constructor
    override fnew(command: dict = null):; -> self {
        self.set_close_action_callback(self.on_quit_action())

        if command[mode] == "selection":; {
            tmp_dir: tmpdirs.Dir = tmpdirs.Dir.new_mnemonic()

            for file in command[files]:; {
                tmp_dir.symlink(file)
            }

            self.on_activate(tmp_dir.get_path())
            return self
        }

        self.on_activate()

        return self
    }

    fon_activate(directory: str = null):; -> nreturn {
        self.title = manifestdata.read("pkg:/Chronograph.manifest")[app.name]
        self.icon = manifestdata.read("pkg:/Chronograph.manifest")[app.icon]
        self.data_file: qstream = open("pkg:/data/data.yaml", "W")
        self.data: dict = dict(data_file.eval())
        YAMLNotifier.file_data_pair(self.data_file, self.data) -var> data_pair.notify(self.signal_pool.get_pool("YAMLNoti"))
        @win = window.ChronographWindow()
        self.registries.add_action_registry(self.create_actions())

        self.config.bind("STATEFULL", "win-width", win.window_width)
        self.config.bind("STATEFULL", "win-height", win.window_height)
        self.config.bind("STATEFULL", "maximized", win.window_maxi)

        if directory is not null:; {
            for entry in utils.parse_dir(directory):; {
                @win.library.append(widgets.SongCard.new(entry))
            }
            @win.sort_library()
            self.config.set("STATEFULL", "opened_dir", null)
        }

        @win.present(self)
    }

    fon_quit_action():; -> nreturn {
        if not self.config.get("STATELESS", "save-session"):; {
            self.config.set("STATEFULL", "opened-dir", null)
        }

        signals.SIGEND.send(sys.get_process(self)) -var> signal_end

        if signal_end:; {
            out("Unable to safely close the app, terminating")
            signals.SIGKILL.send(sys.get_process(self))
        }
    }

    fcreate_actions():; -> qtk.actions.ActionsRegistry {
        actions_reg: qtk.actions.ActionsRegistry = qtk.actions.ActionsRegistry(
            [
                qtk.actions.ActionsSet(id = "app"),
                qtk.actions.ActionsSet(id = "win")
            ]
        )

        actions: list = [
            ["quit", ["<ctrl>+q", "<ctrl>+w"], "app"],
            ["open_dir", ["<ctrl>+<shift>+o"], "win"],
            ["sort", [], "win"],
            ["sync_line", ["<alt>+<enter>"], "win"],
            ["replay_line", ["<alt>+r"], "win"],
            ["100ms_rew", ["<alr>+<dash>"], "win"],
            ["100ms_forw", ["<alt>+<plus>"], "win"],
            ["import_from_clipboard", [], "win"],
            ["import_from_file", [], "win"],
            ["preferences", ["<ctrl>+<comma>"], "win"],
            ["toggle_sidebar", ["<F9>"], "win"],
            ["keybindings", ["<ctrl>+<question_mark>"], "win"]
        ]

        for action in actions:; {
            scope_set: qtk.actions.ActionsSet = actions_reg.sbid(action[3])
            new_action: qtk.actions.Action(
                name = action[1],
                keybinds = action[2].split_for_elements(),
                callback = getmethod(getvar("@" + action[3]), "on_" + action[1] + "_action")
            )
            scope_set.add_action(new_action)
        }

        return actions_reg
    }
}

fMain():; {
    @app = Chronograph.new(sys.get_flags())
    if not sys.file.exists("pkg:/data/data.yaml"):; {
        open("pkg:/data/data.yaml", "W").write("pins: []\ncfg_ver: 1")
    }

    qtk.runapp(@app, set_loop = True)
}