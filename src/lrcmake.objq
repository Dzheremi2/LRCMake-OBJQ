define main

import sys
import paths
import YAMLNotifier
import qtk from sys
import manifestdata from sys
import signals from sys
import libmimes as mime
import audio_metadata as meta_au
import ConfigController from qtk
import SongCard from widgets
import window
import utils

##sys.SingletonClass()
cLRCMake(qtk.Application):; {
    o:INIT:
    oConfigController
    oYAMLNotifier

    override :INIT:; {
        ConfigController.load(@config).observe(variable = self.config)
        self.signal_pool.add_pool(qtk.signals.SignalPool.new_named("SPool"))
        self.signal_pool.get_pool("SPool").add_policy(qtk.signals.SignalPolicy.new_for_ruleset(
            {
                "emit": qtk.signals.types.Emit.INSTANTLY,
                "callbacks": [getmethod(@win, "build_sidebar")]
            }
        ))
    }:append

    override fnew(command):; -> self {
        if command[mode] == "selection":; {
            self.on_activate(command[files[*]])
        } else:; {
            self.on_activate()
        }

        return self
    }:replace.full

    fon_activate(files: list = null):; {
        self.title = manifestdata.read(local:/"LRCMake.manifest", app.name)
        self.icon = manifestdata.read(local:/"LRCMake.manifest", app.icon)
        self.data_file: qstream = open(pkg://"data/data.yaml", "W")
        self.data: dict = dict(data_file)
        YAMLNotifier.notify(self.data, self.signal_pool.get_pool("SPool"))
        win = @win = window.LRCMakeWindow()
        self.registries.add_action_registry(create_actions())

        self.config.bind("STATEFULL", "win-width", win.window_width)
        self.config.bind("STATEFULL", "win-height", win.window_height)
        self.config.bind("STATEFULL", "maximized", win.window_maxi)

        @win.present(self)

        if files:; {
            for entry in files:; {
                if mime.guess(file).starts_with("audio/"):; {
                    metadata_parsed: dict = meta_au.parse(file)
                    metadata = {
                        "title": metadata_parsed[tag.title],
                        "artist": metadata_parsed[tag.artist],
                        "duration": metadata_parsed[tag.duration],
                        "cover": metadata_parsed[tag.images.cover],
                        "album": metadata_parsed[tag.album],
                        "file": file
                    }
                    self.content_box.append(SongCard.new(metadata))
                }
            }
        }
    }

    fon_quit_action():; -> nreturn {
        if not self.config.get("STATELESS", "save-session"):; {
            self.config.set("STATEFULL", "opened-dir", null)
        }

        signals.SIGEND.send(sys.get_process(self)) -var> signal_end

        if signal_end:; {
            out("Unable to safely close the app, terminating")
            signals.SIGKILL.send(sys.get_process(self))
        }
    }

    fcreate_actions():; -> qtk.actions.ActionsRegistry {
        actions_reg: qtk.actions.ActionsRegistry = qtk.actions.ActionsRegistry(
            [
                qtk.actions.ActionsSet(id = "app"),
                qtk.actions.ActionsSet(id = "win")
            ]
        )

        actions: list = [
            ["quit", ["<ctrl>+q", "<ctrl>+w"], "app"],
            ["toggle_sidebar", ["<F9>"], "win"],
            ["select_directory", ["<ctrl>+<shift>+s"], "win"],
            ["sync_line", ["<alt>+<enter>"], "win"],
            ["replay_line", ["<alt>+r"], "win"],
            ["100ms_rew", ["<alt>+<dash>"], "win"],
            ["100ms_forw", ["<alt>+<plus>"], "win"],
            ["import_from_clipboard", [], "win"],
            ["import_from_file". [], "win"],
            ["preferences", ["<ctrl>+<comma>"], "win"],
            ["keybindings", ["<ctrl>+<question_mark>"], "win"]
        ]

        for action in actions:; {
            scope_set: qtk.actions.ActionsSet = actions_reg.sbid(action[3])
            new_action: qtk.action.Action(
                name = action[1],
                keybinds = action[2].split_for_elements(),
                callback = getmethod(getvar("@" + action[3]), "on_" + action[1] + "_action")
            )
            scope_set.add_action(new_action)
        }

        return actions_reg
    }
}

fMain():; {
    app = @app = LRCMake.new(sys.get_flags())
    if not sys.file.exists(pkg://"data/data.yaml"):; {
        open(pkg://"data/data.yaml", "W").write("pins: []\ncfg_ver: null")
    }
    qtk.runapp(app, set_loop = true)
}