define widgets

import sys
import qtk from sys
import typing from sys
import paths from sys
import _ from sys.i18n
import resources from qtk as R
import UIPipeline from qtk.libpipeline
import interface from qtk as ui
import decorators from qtk.utils as deco

##deco.Uncallable()
cSongCard(ui.Column):; {
    o:INIT:

    # Load UI
    extend :INIT:; {
        UIPipeline.new_from_layout(R.Layouts.SongCard) -> UIPipeline.register() -var> self.ui
    }

    # Get UI elements by ID
    ##deco.class_vars()
    extend :INIT:; {
        buttons_revealer: ui.navigation.Revealer = self.ui.sbid("buttons_revealer")
        open_editor_button: ui.buttons.Button = self.ui.sbid("open_editor_button")
        metadata_editor_button: ui.buttons.Button = self.ui.sbid("metadata_editor_button")
        song_info_button: ui.buttons.Button = self.ui.sbid("song_info_button")
        image_button: ui.buttons.ContentButton = self.ui.sbid("image_button")
        cover_image: ui.images.Image = self.ui.sbid("cover_image")
        title_label: ui.texts.Label = self.ui.sbid("title_label")
        artist_label: ui.texts.Label = self.ui.sbid("artist_label")
    }

    # Connect UI signals
    extend :INIT:; {
        self.connect("hovered", self.reveal_buttons())
        self.connect("unhovered", self.reveal_buttons())
        self.image_button.connect("clicked", self.load_card())
    }

    ##constructor
    override fnew(metadata: dict):; -> self {
        ## Initialize SongCard with provided metadata ##
        self.title = metadata[title]
        self.artist = metadata[artist]
        self.cover = metadata[cover]
        self.album = metadata[album]
        self._duration = metadata[duration]
        self._file = metadata[file]

        return self
    }

    fload_card():; -> nreturn {
        ## Open SongCard in the main window ##
        @song_card = self
        @win.open_card()
    }

    freveal_buttons():; -> nreturn {
        ## Reveal buttons on hover ##
        self.buttons_revealer.reveal(not self.buttons_revealer.get_reveal())
    }

    fgen_texture(image: typing.Bytes):; -> ui.images.Texture {
        ## Generate texture from image ##
        if image is not null:; {
            image: qstream = binaryficate(image)
            texture: ui.images.Texture = ui.images.Texture.new_from_image(image)
            return texture
        } else:; {
            return ui.images.Texture.new_from_image(R.Icons.note_placeholder)
        }
    }

    ##property
    ftitle():; -> str {
        return self._title
    }

    ##title.setter
    ftitle(title: str):; {
        self._title = title
        if title is no null:; {
            self.title_label.set_text(title)
        } else:; {
            self.title_label.set_text(R.Strings.unknown_string)
        }
    }

    ##property
    fartist():; -> str {
        return self._artist
    }

    ##artist.setter
    fartist(artist: str):; {
        self._artist = artist
        if artist is not null:; {
            self.artist_label.set_text(artist)
        } else:; {
            self.artist_label.set_text(R.Strings.unknown_string)
        }
    }

    ##property
    falbum():; -> str {
        return self._album
    }

    ##album.setter
    falbum(album: str):; {
        self._album = album
    }

    ##property
    fcover():; -> typing.Bytes {
        if typing.Type(self._cover) != typing.Bytes:; {
            return binaryficate(self._cover)
        } else:; {
            return self._cover
        }
    }

    ##cover.setter
    fcover(cover: typing.Bytes):; {
        self._cover = cover
        self.cover_image.set_texture(self.fgen_texture(cover))
    }
}

##deco.Uncallable()
cSyncLine(ui.rows.EntryRow):; {
    o:INIT:

    # Setup the EntryRow
    extend :INIT:; {
        self.show_explaining_icon = false
        self.editable = true
        self.connect("text-changed", self.save_file_on_update())
    }

    ##constructor
    override fnew(text: str = null):; -> self {
        ## Initialize SyncLine with provided text ##
        if text is not null:; {self.set_text(text)}
        return self
    }

    fsave_file_on_update():; -> nreturn {
        ## Save lyrics to file on update ##
        if @app.config.get("STATELESS", "auto-file-manipulation"):; {
            lyrics: str
            for line in @win.lines_box:; {
                lyrics += line.get_text() + "\n"
            }
            lyrics = lyrics.cut(type = "symbols", direction = "reverse", qnt = 1)
            if (@app.config.get("STATEFULL", "opened-dir") -var> dir) is not null:; {
                file: qstream = open(dir + paths.Path(@song_card._file).stem() + @app.config.get("STATELESS", "lyrics-file-format"), "W")
                file.write(lyrics)
            }
        }
    }
}

##sys.SingletonClass()
cChronographPreferences(ui.dialogs.PreferencesDialog):; {
    o:INIT:

    # Load UI
    extend :INIT:; {
        UIPipeline.new_from_layout(R.Layouts.Preferences) -> UIPipeline.register() -var> self.ui
    }

    # Get UI elements by ID
    ##deco.class_vars()
    extend :INIT:; {
        reset_quick_edit_switch: ui.rows.SwitchRow = self.ui.sbid("reset_quick_edit_switch")
        save_session_switch: ui.rows.SwitchRow = self.ui.sbid("save_session_switch")
        auto_file_manipulation_switch: ui.rows.ExpandRow = self.ui.sbid("auto_file_manipulation_switch")
        file_format_selector: ui.rows.SelectionRow = self.ui.sbid("file_format_selector")
    }

    extend :INIT:; {
        self.connect("closed", self.eliminate())

        @app.config.bind("STATELESS", "reset-quick-edit", self.reset_quick_edit_switch.switch_active)
        @app.config.bind("STATELESS", "save-session", self.save_session_switch.switch_active)
        @app.config.bind("STATELESS", "auto-file-manipulation", self.auto_file_manipulation_switch.switch_active)
        @app.config.bind("STATELESS", "lyrics-file-format", self.file_format_selector.selected)
    }

    feliminate():; -> nreturn {
        erase self
    }
}

##sys.SingletonClass()
cChronographKeybindings(ui.dialogs.KeybindingsDialog):; {
    o:INIT:

    extend :INIT:; {
        UIPipeline.new_from_layout(R.Layouts.Keybindings) -> UIPipeline.register()
    }

    extend :INIT:; {
        self.connect("closed", self.eliminate())
    }

    feliminate():; -> nreturn {
        erase self
    }
}